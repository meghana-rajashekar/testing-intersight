/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ErrorResponseHandlerAncestorsObservation struct {
}

type ErrorResponseHandlerAncestorsParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ErrorResponseHandlerCatalogObservation struct {
}

type ErrorResponseHandlerCatalogParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ErrorResponseHandlerObservation_2 struct {
}

type ErrorResponseHandlerParameters_2 struct {

	// The Account ID for this managed object.
	// +kubebuilder:validation:Optional
	AccountMoid *string `json:"accountMoid,omitempty" tf:"account_moid,omitempty"`

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// An array of relationships to moBaseMo resources.
	// +kubebuilder:validation:Optional
	Ancestors []ErrorResponseHandlerAncestorsParameters `json:"ancestors,omitempty" tf:"ancestors,omitempty"`

	// A reference to a workflowCatalog resource.
	// When the $expand query parameter is specified, the referenced resource is returned inline.
	// +kubebuilder:validation:Optional
	Catalog []ErrorResponseHandlerCatalogParameters `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The time when this managed object was created.
	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// A detailed description about the error response handler.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The DomainGroup ID for this managed object.
	// +kubebuilder:validation:Optional
	DomainGroupMoid *string `json:"domainGroupMoid,omitempty" tf:"domain_group_moid,omitempty"`

	// The time when this managed object was last modified.
	// +kubebuilder:validation:Optional
	ModTime *string `json:"modTime,omitempty" tf:"mod_time,omitempty"`

	// The unique identifier of this Managed Object instance.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// The value should be the same as the 'ClassId' property.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// +kubebuilder:validation:Optional
	Owners []*string `json:"owners,omitempty" tf:"owners,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// A reference to a moBaseMo resource.
	// When the $expand query parameter is specified, the referenced resource is returned inline.
	// +kubebuilder:validation:Optional
	Parent []ErrorResponseHandlerParentParameters `json:"parent,omitempty" tf:"parent,omitempty"`

	// An array of relationships to moBaseMo resources.
	// +kubebuilder:validation:Optional
	PermissionResources []ErrorResponseHandlerPermissionResourcesParameters `json:"permissionResources,omitempty" tf:"permission_resources,omitempty"`

	// The platform type for which the error response handler is defined.
	// * `` - The device reported an empty or unrecognized platform type.
	// * `APIC` - An Application Policy Infrastructure Controller cluster.
	// * `DCNM` - A Data Center Network Manager instance. Data Center Network Manager (DCNM) is the network management platform for all NX-OS-enabled deployments, spanning new fabric architectures, IP Fabric for Media, and storage networking deployments for the Cisco Nexus-powered data center.
	// * `UCSFI` - A UCS Fabric Interconnect in HA or standalone mode, which is being managed by UCS Manager (UCSM).
	// * `UCSFIISM` - A UCS Fabric Interconnect in HA or standalone mode, managed directly by Intersight.
	// * `IMC` - A standalone UCS Server Integrated Management Controller.
	// * `IMCM4` - A standalone UCS M4 Server.
	// * `IMCM5` - A standalone UCS M5 server.
	// * `IMCRack` - A standalone UCS M6 and above server.
	// * `UCSIOM` - An UCS Chassis IO module.
	// * `HX` - A HyperFlex storage controller.
	// * `HyperFlexAP` - A HyperFlex Application Platform.
	// * `IWE` - An Intersight Workload Engine.
	// * `UCSD` - A UCS Director virtual appliance. Cisco UCS Director automates, orchestrates, and manages Cisco and third-party hardware.
	// * `IntersightAppliance` - A Cisco Intersight Connected Virtual Appliance.
	// * `IntersightAssist` - A Cisco Intersight Assist.
	// * `PureStorageFlashArray` - A Pure Storage FlashArray device.
	// * `NexusDevice` - A generic platform type to support Nexus Network Device. This can also be extended to support all network devices later on.
	// * `UCSC890` - A standalone Cisco UCSC890 server.
	// * `NetAppOntap` - A NetApp ONTAP storage system.
	// * `NetAppActiveIqUnifiedManager` - A NetApp Active IQ Unified Manager.
	// * `EmcScaleIo` - An EMC ScaleIO storage system.
	// * `EmcVmax` - An EMC VMAX storage system.
	// * `EmcVplex` - An EMC VPLEX storage system.
	// * `EmcXtremIo` - An EMC XtremIO storage system.
	// * `VmwareVcenter` - A VMware vCenter device that manages Virtual Machines.
	// * `MicrosoftHyperV` - A Microsoft Hyper-V system that manages Virtual Machines.
	// * `AppDynamics` - An AppDynamics controller that monitors applications.
	// * `Dynatrace` - A software-intelligence monitoring platform that simplifies enterprise cloud complexity and accelerates digital transformation.
	// * `NewRelic` - A software-intelligence monitoring platform that simplifies enterprise cloud complexity and accelerates digital transformation.
	// * `ServiceNow` - A cloud-based workflow automation platform that enables enterprise organizations to improve operational efficiencies by streamlining and automating routine work tasks.
	// * `ReadHatOpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints.
	// * `CloudFoundry` - An open source cloud platform on which developers can build, deploy, run and scale applications.
	// * `MicrosoftAzureApplicationInsights` - A feature of Azure Monitor, is an extensible Application Performance Management service for developers and DevOps professionals to monitor their live applications.
	// * `OpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints.
	// * `MicrosoftSqlServer` - A Microsoft SQL database server.
	// * `Kubernetes` - A Kubernetes cluster that runs containerized applications.
	// * `AmazonWebService` - A Amazon web service target that discovers and monitors different services like EC2. It discovers entities like VMs, Volumes, regions etc. and monitors attributes like Mem, CPU, cost.
	// * `AmazonWebServiceBilling` - A Amazon web service billing target to retrieve billing information stored in S3 bucket.
	// * `MicrosoftAzureServicePrincipal` - A Microsoft Azure Service Principal target that discovers all the associated Azure subscriptions.
	// * `MicrosoftAzureEnterpriseAgreement` - A Microsoft Azure Enterprise Agreement target that discovers cost, billing and RIs.
	// * `DellCompellent` - A Dell Compellent storage system.
	// * `HPE3Par` - A HPE 3PAR storage system.
	// * `RedHatEnterpriseVirtualization` - A Red Hat Enterprise Virtualization Hypervisor system that manages Virtual Machines.
	// * `NutanixAcropolis` - A Nutanix Acropolis system that combines servers and storage into a distributed infrastructure platform.
	// * `HPEOneView` - A HPE Oneview management system that manages compute, storage, and networking.
	// * `ServiceEngine` - Cisco Application Services Engine. Cisco Application Services Engine is a platform to deploy and manage applications.
	// * `HitachiVirtualStoragePlatform` - A Hitachi Virtual Storage Platform also referred to as Hitachi VSP. It includes various storage systems designed for data centers.
	// * `IMCBlade` - An Intersight managed UCS Blade Server.
	// * `TerraformCloud` - A Terraform Cloud account.
	// * `TerraformAgent` - A Terraform Cloud Agent that Intersight will deploy in datacenter. The agent will execute Terraform plan for Terraform Cloud workspace configured to use the agent.
	// * `CustomTarget` - An external endpoint added as Target that can be accessed through its HTTP API interface in Intersight Orchestrator automation workflow.Standard HTTP authentication scheme supported: Basic.
	// * `AnsibleEndpoint` - An external endpoint added as Target that can be accessed through Ansible in Intersight Cloud Orchestrator automation workflow.
	// * `HTTPEndpoint` - An external endpoint added as Target that can be accessed through its HTTP API interface in Intersight Orchestrator automation workflow.Standard HTTP authentication scheme supported: Basic, Bearer Token.
	// * `SSHEndpoint` - An external endpoint added as Target that can be accessed through SSH in Intersight Cloud Orchestrator automation workflow.
	// * `CiscoCatalyst` - A Cisco Catalyst networking switch device.
	// * `PowerShellEndpoint` - A Windows machine on which PowerShell scripts can be executed remotely.
	// +kubebuilder:validation:Optional
	PlatformType *string `json:"platformType,omitempty" tf:"platform_type,omitempty"`

	// Intersight provides pre-built workflows, tasks and policies to end users through global catalogs.
	// Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.
	// +kubebuilder:validation:Optional
	SharedScope *string `json:"sharedScope,omitempty" tf:"shared_scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []ErrorResponseHandlerTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Types []TypesParameters `json:"types,omitempty" tf:"types,omitempty"`

	// The versioning info for this managed object.
	// +kubebuilder:validation:Optional
	VersionContext []ErrorResponseHandlerVersionContextParameters `json:"versionContext,omitempty" tf:"version_context,omitempty"`
}

type ErrorResponseHandlerParentObservation struct {
}

type ErrorResponseHandlerParentParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ErrorResponseHandlerPermissionResourcesObservation struct {
}

type ErrorResponseHandlerPermissionResourcesParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ErrorResponseHandlerTagsObservation struct {
}

type ErrorResponseHandlerTagsParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The string representation of a tag key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The string representation of a tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ErrorResponseHandlerVersionContextInterestedMosObservation struct {
}

type ErrorResponseHandlerVersionContextInterestedMosParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ErrorResponseHandlerVersionContextObservation struct {
}

type ErrorResponseHandlerVersionContextParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// +kubebuilder:validation:Optional
	InterestedMos []ErrorResponseHandlerVersionContextInterestedMosParameters `json:"interestedMos,omitempty" tf:"interested_mos,omitempty"`

	// The version of the Managed Object, e.g. an incrementing number or a hash id.
	// +kubebuilder:validation:Optional
	NrVersion *string `json:"nrVersion,omitempty" tf:"nr_version,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// The value should be the same as the 'ClassId' property.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// A reference to the original Managed Object.
	// +kubebuilder:validation:Optional
	RefMo []ErrorResponseHandlerVersionContextRefMoParameters `json:"refMo,omitempty" tf:"ref_mo,omitempty"`

	// The time this versioned Managed Object was created.
	// +kubebuilder:validation:Optional
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`

	// Specifies type of version. Currently the only supported value is "Configured"
	// that is used to keep track of snapshots of policies and profiles that are intended
	// to be configured to target endpoints.
	// * `Modified` - Version created every time an object is modified.
	// * `Configured` - Version created every time an object is configured to the service profile.
	// * `Deployed` - Version created for objects related to a service profile when it is deployed.
	// +kubebuilder:validation:Optional
	VersionType *string `json:"versionType,omitempty" tf:"version_type,omitempty"`
}

type ErrorResponseHandlerVersionContextRefMoObservation struct {
}

type ErrorResponseHandlerVersionContextRefMoParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The Moid of the referenced REST resource.
	// +kubebuilder:validation:Optional
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The fully-qualified name of the remote type referred by this relationship.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// An OData $filter expression which describes the REST resource to be referenced. This field may
	// be set instead of 'moid' by clients.
	// 1. If 'moid' is set this field is ignored.
	// 1. If 'selector' is set and 'moid' is empty/absent from the request, Intersight determines the Moid of the
	// resource matching the filter expression and populates it in the MoRef that is part of the object
	// instance being inserted/updated to fulfill the REST request.
	// An error is returned if the filter matches zero or more than one REST resource.
	// An example filter string is: Serial eq '3AA8B7T11'.
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {

	// The flag that allows single values in content to be extracted as a
	// single element collection in case the parameter is of Collection type.
	// This flag is applicable for parameters of type Collection only.
	// +kubebuilder:validation:Optional
	AcceptSingleValue *bool `json:"acceptSingleValue,omitempty" tf:"accept_single_value,omitempty"`

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// The enum values provides the list of concrete types that can be instantiated from this abstract type.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The name of the complex type definition in case this is a complex
	// parameter. The content.Grammar object must have a complex type, content.ComplexType,
	// defined with the specified name in types collection property.
	// +kubebuilder:validation:Optional
	ComplexType *string `json:"complexType,omitempty" tf:"complex_type,omitempty"`

	// The type of the collection item in case this is a collection parameter.
	// * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum.
	// * `string` - The parameter value to be extracted is of the string type.
	// * `integer` - The parameter value to be extracted is of the number type.
	// * `float` - The parameter value to be extracted is of the float number type.
	// * `boolean` - The parameter value to be extracted is of the boolean type.
	// * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type.
	// * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters.
	// * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
	// +kubebuilder:validation:Optional
	ItemType *string `json:"itemType,omitempty" tf:"item_type,omitempty"`

	// The name of the parameter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// The value should be the same as the 'ClassId' property.
	// The enum values provides the list of concrete types that can be instantiated from this abstract type.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// The content specific path information that identifies the parameter
	// value within the content. The value is usually a XPath or JSONPath or a
	// regular expression in case of text content.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The flag indicates if the extracted value is secure.
	// This flag is applicable for parameters of type String only.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// The type of the parameter. Accepted values are simple, complex,
	// collection.
	// * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum.
	// * `string` - The parameter value to be extracted is of the string type.
	// * `integer` - The parameter value to be extracted is of the number type.
	// * `float` - The parameter value to be extracted is of the float number type.
	// * `boolean` - The parameter value to be extracted is of the boolean type.
	// * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type.
	// * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters.
	// * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TypesObservation struct {
}

type TypesParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The unique name of this complex type within the grammar specification.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// The value should be the same as the 'ClassId' property.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []TypesParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type TypesParametersObservation struct {
}

type TypesParametersParameters struct {

	// The flag that allows single values in content to be extracted as a
	// single element collection in case the parameter is of Collection type.
	// This flag is applicable for parameters of type Collection only.
	// +kubebuilder:validation:Optional
	AcceptSingleValue *bool `json:"acceptSingleValue,omitempty" tf:"accept_single_value,omitempty"`

	// +kubebuilder:validation:Optional
	AdditionalProperties *string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// This property is used as a discriminator to identify the type of the payload
	// when marshaling and unmarshaling data.
	// The enum values provides the list of concrete types that can be instantiated from this abstract type.
	// +kubebuilder:validation:Optional
	ClassID *string `json:"classId,omitempty" tf:"class_id,omitempty"`

	// The name of the complex type definition in case this is a complex
	// parameter. The content.Grammar object must have a complex type, content.ComplexType,
	// defined with the specified name in types collection property.
	// +kubebuilder:validation:Optional
	ComplexType *string `json:"complexType,omitempty" tf:"complex_type,omitempty"`

	// The type of the collection item in case this is a collection parameter.
	// * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum.
	// * `string` - The parameter value to be extracted is of the string type.
	// * `integer` - The parameter value to be extracted is of the number type.
	// * `float` - The parameter value to be extracted is of the float number type.
	// * `boolean` - The parameter value to be extracted is of the boolean type.
	// * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type.
	// * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters.
	// * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
	// +kubebuilder:validation:Optional
	ItemType *string `json:"itemType,omitempty" tf:"item_type,omitempty"`

	// The name of the parameter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The fully-qualified name of the instantiated, concrete type.
	// The value should be the same as the 'ClassId' property.
	// The enum values provides the list of concrete types that can be instantiated from this abstract type.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// The content specific path information that identifies the parameter
	// value within the content. The value is usually a XPath or JSONPath or a
	// regular expression in case of text content.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The flag indicates if the extracted value is secure.
	// This flag is applicable for parameters of type String only.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// The type of the parameter. Accepted values are simple, complex,
	// collection.
	// * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum.
	// * `string` - The parameter value to be extracted is of the string type.
	// * `integer` - The parameter value to be extracted is of the number type.
	// * `float` - The parameter value to be extracted is of the float number type.
	// * `boolean` - The parameter value to be extracted is of the boolean type.
	// * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type.
	// * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters.
	// * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ErrorResponseHandlerSpec defines the desired state of ErrorResponseHandler
type ErrorResponseHandlerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ErrorResponseHandlerParameters_2 `json:"forProvider"`
}

// ErrorResponseHandlerStatus defines the observed state of ErrorResponseHandler.
type ErrorResponseHandlerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ErrorResponseHandlerObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ErrorResponseHandler is the Schema for the ErrorResponseHandlers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,intersightjet}
type ErrorResponseHandler struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ErrorResponseHandlerSpec   `json:"spec"`
	Status            ErrorResponseHandlerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ErrorResponseHandlerList contains a list of ErrorResponseHandlers
type ErrorResponseHandlerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ErrorResponseHandler `json:"items"`
}

// Repository type metadata.
var (
	ErrorResponseHandler_Kind             = "ErrorResponseHandler"
	ErrorResponseHandler_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ErrorResponseHandler_Kind}.String()
	ErrorResponseHandler_KindAPIVersion   = ErrorResponseHandler_Kind + "." + CRDGroupVersion.String()
	ErrorResponseHandler_GroupVersionKind = CRDGroupVersion.WithKind(ErrorResponseHandler_Kind)
)

func init() {
	SchemeBuilder.Register(&ErrorResponseHandler{}, &ErrorResponseHandlerList{})
}
