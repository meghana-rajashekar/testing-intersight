//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AncestorsObservation) DeepCopyInto(out *AncestorsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AncestorsObservation.
func (in *AncestorsObservation) DeepCopy() *AncestorsObservation {
	if in == nil {
		return nil
	}
	out := new(AncestorsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AncestorsParameters) DeepCopyInto(out *AncestorsParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AncestorsParameters.
func (in *AncestorsParameters) DeepCopy() *AncestorsParameters {
	if in == nil {
		return nil
	}
	out := new(AncestorsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterestedMosObservation) DeepCopyInto(out *InterestedMosObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterestedMosObservation.
func (in *InterestedMosObservation) DeepCopy() *InterestedMosObservation {
	if in == nil {
		return nil
	}
	out := new(InterestedMosObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterestedMosParameters) DeepCopyInto(out *InterestedMosParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterestedMosParameters.
func (in *InterestedMosParameters) DeepCopy() *InterestedMosParameters {
	if in == nil {
		return nil
	}
	out := new(InterestedMosParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationObservation) DeepCopyInto(out *OrganizationObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationObservation.
func (in *OrganizationObservation) DeepCopy() *OrganizationObservation {
	if in == nil {
		return nil
	}
	out := new(OrganizationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationParameters) DeepCopyInto(out *OrganizationParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationParameters.
func (in *OrganizationParameters) DeepCopy() *OrganizationParameters {
	if in == nil {
		return nil
	}
	out := new(OrganizationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParentObservation) DeepCopyInto(out *ParentObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParentObservation.
func (in *ParentObservation) DeepCopy() *ParentObservation {
	if in == nil {
		return nil
	}
	out := new(ParentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParentParameters) DeepCopyInto(out *ParentParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParentParameters.
func (in *ParentParameters) DeepCopy() *ParentParameters {
	if in == nil {
		return nil
	}
	out := new(ParentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionResourcesObservation) DeepCopyInto(out *PermissionResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionResourcesObservation.
func (in *PermissionResourcesObservation) DeepCopy() *PermissionResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionResourcesParameters) DeepCopyInto(out *PermissionResourcesParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionResourcesParameters.
func (in *PermissionResourcesParameters) DeepCopy() *PermissionResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Policy) DeepCopyInto(out *Policy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Policy.
func (in *Policy) DeepCopy() *Policy {
	if in == nil {
		return nil
	}
	out := new(Policy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Policy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyList) DeepCopyInto(out *PolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Policy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyList.
func (in *PolicyList) DeepCopy() *PolicyList {
	if in == nil {
		return nil
	}
	out := new(PolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyObservation) DeepCopyInto(out *PolicyObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyObservation.
func (in *PolicyObservation) DeepCopy() *PolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyParameters) DeepCopyInto(out *PolicyParameters) {
	*out = *in
	if in.AccountMoid != nil {
		in, out := &in.AccountMoid, &out.AccountMoid
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu1State != nil {
		in, out := &in.AcsControlGpu1State, &out.AcsControlGpu1State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu2State != nil {
		in, out := &in.AcsControlGpu2State, &out.AcsControlGpu2State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu3State != nil {
		in, out := &in.AcsControlGpu3State, &out.AcsControlGpu3State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu4State != nil {
		in, out := &in.AcsControlGpu4State, &out.AcsControlGpu4State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu5State != nil {
		in, out := &in.AcsControlGpu5State, &out.AcsControlGpu5State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu6State != nil {
		in, out := &in.AcsControlGpu6State, &out.AcsControlGpu6State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu7State != nil {
		in, out := &in.AcsControlGpu7State, &out.AcsControlGpu7State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlGpu8State != nil {
		in, out := &in.AcsControlGpu8State, &out.AcsControlGpu8State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlSlot11State != nil {
		in, out := &in.AcsControlSlot11State, &out.AcsControlSlot11State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlSlot12State != nil {
		in, out := &in.AcsControlSlot12State, &out.AcsControlSlot12State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlSlot13State != nil {
		in, out := &in.AcsControlSlot13State, &out.AcsControlSlot13State
		*out = new(string)
		**out = **in
	}
	if in.AcsControlSlot14State != nil {
		in, out := &in.AcsControlSlot14State, &out.AcsControlSlot14State
		*out = new(string)
		**out = **in
	}
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.AdjacentCacheLinePrefetch != nil {
		in, out := &in.AdjacentCacheLinePrefetch, &out.AdjacentCacheLinePrefetch
		*out = new(string)
		**out = **in
	}
	if in.AdvancedMemTest != nil {
		in, out := &in.AdvancedMemTest, &out.AdvancedMemTest
		*out = new(string)
		**out = **in
	}
	if in.AllUsbDevices != nil {
		in, out := &in.AllUsbDevices, &out.AllUsbDevices
		*out = new(string)
		**out = **in
	}
	if in.Altitude != nil {
		in, out := &in.Altitude, &out.Altitude
		*out = new(string)
		**out = **in
	}
	if in.Ancestors != nil {
		in, out := &in.Ancestors, &out.Ancestors
		*out = make([]AncestorsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AspmSupport != nil {
		in, out := &in.AspmSupport, &out.AspmSupport
		*out = new(string)
		**out = **in
	}
	if in.AssertNmiOnPerr != nil {
		in, out := &in.AssertNmiOnPerr, &out.AssertNmiOnPerr
		*out = new(string)
		**out = **in
	}
	if in.AssertNmiOnSerr != nil {
		in, out := &in.AssertNmiOnSerr, &out.AssertNmiOnSerr
		*out = new(string)
		**out = **in
	}
	if in.AutoCcState != nil {
		in, out := &in.AutoCcState, &out.AutoCcState
		*out = new(string)
		**out = **in
	}
	if in.AutonumousCstateEnable != nil {
		in, out := &in.AutonumousCstateEnable, &out.AutonumousCstateEnable
		*out = new(string)
		**out = **in
	}
	if in.BaudRate != nil {
		in, out := &in.BaudRate, &out.BaudRate
		*out = new(string)
		**out = **in
	}
	if in.BmeDmaMitigation != nil {
		in, out := &in.BmeDmaMitigation, &out.BmeDmaMitigation
		*out = new(string)
		**out = **in
	}
	if in.BootOptionNumRetry != nil {
		in, out := &in.BootOptionNumRetry, &out.BootOptionNumRetry
		*out = new(string)
		**out = **in
	}
	if in.BootOptionReCoolDown != nil {
		in, out := &in.BootOptionReCoolDown, &out.BootOptionReCoolDown
		*out = new(string)
		**out = **in
	}
	if in.BootOptionRetry != nil {
		in, out := &in.BootOptionRetry, &out.BootOptionRetry
		*out = new(string)
		**out = **in
	}
	if in.BootPerformanceMode != nil {
		in, out := &in.BootPerformanceMode, &out.BootPerformanceMode
		*out = new(string)
		**out = **in
	}
	if in.BurstAndPostponedRefresh != nil {
		in, out := &in.BurstAndPostponedRefresh, &out.BurstAndPostponedRefresh
		*out = new(string)
		**out = **in
	}
	if in.C1AutoDemotion != nil {
		in, out := &in.C1AutoDemotion, &out.C1AutoDemotion
		*out = new(string)
		**out = **in
	}
	if in.C1AutoUnDemotion != nil {
		in, out := &in.C1AutoUnDemotion, &out.C1AutoUnDemotion
		*out = new(string)
		**out = **in
	}
	if in.CPUEnergyPerformance != nil {
		in, out := &in.CPUEnergyPerformance, &out.CPUEnergyPerformance
		*out = new(string)
		**out = **in
	}
	if in.CPUFrequencyFloor != nil {
		in, out := &in.CPUFrequencyFloor, &out.CPUFrequencyFloor
		*out = new(string)
		**out = **in
	}
	if in.CPUPerfEnhancement != nil {
		in, out := &in.CPUPerfEnhancement, &out.CPUPerfEnhancement
		*out = new(string)
		**out = **in
	}
	if in.CPUPerformance != nil {
		in, out := &in.CPUPerformance, &out.CPUPerformance
		*out = new(string)
		**out = **in
	}
	if in.CPUPowerManagement != nil {
		in, out := &in.CPUPowerManagement, &out.CPUPowerManagement
		*out = new(string)
		**out = **in
	}
	if in.CbsCPUCcdCtrlSsp != nil {
		in, out := &in.CbsCPUCcdCtrlSsp, &out.CbsCPUCcdCtrlSsp
		*out = new(string)
		**out = **in
	}
	if in.CbsCPUCoreCtrl != nil {
		in, out := &in.CbsCPUCoreCtrl, &out.CbsCPUCoreCtrl
		*out = new(string)
		**out = **in
	}
	if in.CbsCPUSmtCtrl != nil {
		in, out := &in.CbsCPUSmtCtrl, &out.CbsCPUSmtCtrl
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnApbdis != nil {
		in, out := &in.CbsCmnApbdis, &out.CbsCmnApbdis
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUCpb != nil {
		in, out := &in.CbsCmnCPUCpb, &out.CbsCmnCPUCpb
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUGenDowncoreCtrl != nil {
		in, out := &in.CbsCmnCPUGenDowncoreCtrl, &out.CbsCmnCPUGenDowncoreCtrl
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUGlobalCstateCtrl != nil {
		in, out := &in.CbsCmnCPUGlobalCstateCtrl, &out.CbsCmnCPUGlobalCstateCtrl
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUL1StreamHwPrefetcher != nil {
		in, out := &in.CbsCmnCPUL1StreamHwPrefetcher, &out.CbsCmnCPUL1StreamHwPrefetcher
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUL2StreamHwPrefetcher != nil {
		in, out := &in.CbsCmnCPUL2StreamHwPrefetcher, &out.CbsCmnCPUL2StreamHwPrefetcher
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUSmee != nil {
		in, out := &in.CbsCmnCPUSmee, &out.CbsCmnCPUSmee
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnCPUStreamingStoresCtrl != nil {
		in, out := &in.CbsCmnCPUStreamingStoresCtrl, &out.CbsCmnCPUStreamingStoresCtrl
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnDeterminismSlider != nil {
		in, out := &in.CbsCmnDeterminismSlider, &out.CbsCmnDeterminismSlider
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnEfficiencyModeEn != nil {
		in, out := &in.CbsCmnEfficiencyModeEn, &out.CbsCmnEfficiencyModeEn
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnFixedSocPstate != nil {
		in, out := &in.CbsCmnFixedSocPstate, &out.CbsCmnFixedSocPstate
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnGnbNbIommu != nil {
		in, out := &in.CbsCmnGnbNbIommu, &out.CbsCmnGnbNbIommu
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnGnbSmuDfCstates != nil {
		in, out := &in.CbsCmnGnbSmuDfCstates, &out.CbsCmnGnbSmuDfCstates
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnGnbSmucppc != nil {
		in, out := &in.CbsCmnGnbSmucppc, &out.CbsCmnGnbSmucppc
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnMemCtrlBankGroupSwapDdr4 != nil {
		in, out := &in.CbsCmnMemCtrlBankGroupSwapDdr4, &out.CbsCmnMemCtrlBankGroupSwapDdr4
		*out = new(string)
		**out = **in
	}
	if in.CbsCmnMemMapBankInterleaveDdr4 != nil {
		in, out := &in.CbsCmnMemMapBankInterleaveDdr4, &out.CbsCmnMemMapBankInterleaveDdr4
		*out = new(string)
		**out = **in
	}
	if in.CbsCmncTdpCtl != nil {
		in, out := &in.CbsCmncTdpCtl, &out.CbsCmncTdpCtl
		*out = new(string)
		**out = **in
	}
	if in.CbsDbgCPUSnpMemCover != nil {
		in, out := &in.CbsDbgCPUSnpMemCover, &out.CbsDbgCPUSnpMemCover
		*out = new(string)
		**out = **in
	}
	if in.CbsDbgCPUSnpMemSizeCover != nil {
		in, out := &in.CbsDbgCPUSnpMemSizeCover, &out.CbsDbgCPUSnpMemSizeCover
		*out = new(string)
		**out = **in
	}
	if in.CbsDfCmnAcpiSratL3Numa != nil {
		in, out := &in.CbsDfCmnAcpiSratL3Numa, &out.CbsDfCmnAcpiSratL3Numa
		*out = new(string)
		**out = **in
	}
	if in.CbsDfCmnDramNps != nil {
		in, out := &in.CbsDfCmnDramNps, &out.CbsDfCmnDramNps
		*out = new(string)
		**out = **in
	}
	if in.CbsDfCmnMemIntlv != nil {
		in, out := &in.CbsDfCmnMemIntlv, &out.CbsDfCmnMemIntlv
		*out = new(string)
		**out = **in
	}
	if in.CbsDfCmnMemIntlvSize != nil {
		in, out := &in.CbsDfCmnMemIntlvSize, &out.CbsDfCmnMemIntlvSize
		*out = new(string)
		**out = **in
	}
	if in.CbsSevSnpSupport != nil {
		in, out := &in.CbsSevSnpSupport, &out.CbsSevSnpSupport
		*out = new(string)
		**out = **in
	}
	if in.CdnEnable != nil {
		in, out := &in.CdnEnable, &out.CdnEnable
		*out = new(string)
		**out = **in
	}
	if in.CdnSupport != nil {
		in, out := &in.CdnSupport, &out.CdnSupport
		*out = new(string)
		**out = **in
	}
	if in.ChannelInterLeave != nil {
		in, out := &in.ChannelInterLeave, &out.ChannelInterLeave
		*out = new(string)
		**out = **in
	}
	if in.CiscoAdaptiveMemTraining != nil {
		in, out := &in.CiscoAdaptiveMemTraining, &out.CiscoAdaptiveMemTraining
		*out = new(string)
		**out = **in
	}
	if in.CiscoDebugLevel != nil {
		in, out := &in.CiscoDebugLevel, &out.CiscoDebugLevel
		*out = new(string)
		**out = **in
	}
	if in.CiscoOpromLaunchOptimization != nil {
		in, out := &in.CiscoOpromLaunchOptimization, &out.CiscoOpromLaunchOptimization
		*out = new(string)
		**out = **in
	}
	if in.CiscoXgmiMaxSpeed != nil {
		in, out := &in.CiscoXgmiMaxSpeed, &out.CiscoXgmiMaxSpeed
		*out = new(string)
		**out = **in
	}
	if in.CkeLowPolicy != nil {
		in, out := &in.CkeLowPolicy, &out.CkeLowPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.ClosedLoopThermThrotl != nil {
		in, out := &in.ClosedLoopThermThrotl, &out.ClosedLoopThermThrotl
		*out = new(string)
		**out = **in
	}
	if in.CmciEnable != nil {
		in, out := &in.CmciEnable, &out.CmciEnable
		*out = new(string)
		**out = **in
	}
	if in.ConfigTdp != nil {
		in, out := &in.ConfigTdp, &out.ConfigTdp
		*out = new(string)
		**out = **in
	}
	if in.ConfigTdpLevel != nil {
		in, out := &in.ConfigTdpLevel, &out.ConfigTdpLevel
		*out = new(string)
		**out = **in
	}
	if in.ConsoleRedirection != nil {
		in, out := &in.ConsoleRedirection, &out.ConsoleRedirection
		*out = new(string)
		**out = **in
	}
	if in.CoreMultiProcessing != nil {
		in, out := &in.CoreMultiProcessing, &out.CoreMultiProcessing
		*out = new(string)
		**out = **in
	}
	if in.CrQos != nil {
		in, out := &in.CrQos, &out.CrQos
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.CrfastgoConfig != nil {
		in, out := &in.CrfastgoConfig, &out.CrfastgoConfig
		*out = new(string)
		**out = **in
	}
	if in.DcpmmFirmwareDowngrade != nil {
		in, out := &in.DcpmmFirmwareDowngrade, &out.DcpmmFirmwareDowngrade
		*out = new(string)
		**out = **in
	}
	if in.DemandScrub != nil {
		in, out := &in.DemandScrub, &out.DemandScrub
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectCacheAccess != nil {
		in, out := &in.DirectCacheAccess, &out.DirectCacheAccess
		*out = new(string)
		**out = **in
	}
	if in.DomainGroupMoid != nil {
		in, out := &in.DomainGroupMoid, &out.DomainGroupMoid
		*out = new(string)
		**out = **in
	}
	if in.DramClockThrottling != nil {
		in, out := &in.DramClockThrottling, &out.DramClockThrottling
		*out = new(string)
		**out = **in
	}
	if in.DramRefreshRate != nil {
		in, out := &in.DramRefreshRate, &out.DramRefreshRate
		*out = new(string)
		**out = **in
	}
	if in.DramSwThermalThrottling != nil {
		in, out := &in.DramSwThermalThrottling, &out.DramSwThermalThrottling
		*out = new(string)
		**out = **in
	}
	if in.EadrSupport != nil {
		in, out := &in.EadrSupport, &out.EadrSupport
		*out = new(string)
		**out = **in
	}
	if in.EdpcEn != nil {
		in, out := &in.EdpcEn, &out.EdpcEn
		*out = new(string)
		**out = **in
	}
	if in.EnableClockSpreadSpec != nil {
		in, out := &in.EnableClockSpreadSpec, &out.EnableClockSpreadSpec
		*out = new(string)
		**out = **in
	}
	if in.EnableMktme != nil {
		in, out := &in.EnableMktme, &out.EnableMktme
		*out = new(string)
		**out = **in
	}
	if in.EnableSgx != nil {
		in, out := &in.EnableSgx, &out.EnableSgx
		*out = new(string)
		**out = **in
	}
	if in.EnableTme != nil {
		in, out := &in.EnableTme, &out.EnableTme
		*out = new(string)
		**out = **in
	}
	if in.EnergyEfficientTurbo != nil {
		in, out := &in.EnergyEfficientTurbo, &out.EnergyEfficientTurbo
		*out = new(string)
		**out = **in
	}
	if in.EngPerfTuning != nil {
		in, out := &in.EngPerfTuning, &out.EngPerfTuning
		*out = new(string)
		**out = **in
	}
	if in.EnhancedIntelSpeedStepTech != nil {
		in, out := &in.EnhancedIntelSpeedStepTech, &out.EnhancedIntelSpeedStepTech
		*out = new(string)
		**out = **in
	}
	if in.EpochUpdate != nil {
		in, out := &in.EpochUpdate, &out.EpochUpdate
		*out = new(string)
		**out = **in
	}
	if in.EppEnable != nil {
		in, out := &in.EppEnable, &out.EppEnable
		*out = new(string)
		**out = **in
	}
	if in.EppProfile != nil {
		in, out := &in.EppProfile, &out.EppProfile
		*out = new(string)
		**out = **in
	}
	if in.ExecuteDisableBit != nil {
		in, out := &in.ExecuteDisableBit, &out.ExecuteDisableBit
		*out = new(string)
		**out = **in
	}
	if in.ExtendedApic != nil {
		in, out := &in.ExtendedApic, &out.ExtendedApic
		*out = new(string)
		**out = **in
	}
	if in.FlowControl != nil {
		in, out := &in.FlowControl, &out.FlowControl
		*out = new(string)
		**out = **in
	}
	if in.Frb2Enable != nil {
		in, out := &in.Frb2Enable, &out.Frb2Enable
		*out = new(string)
		**out = **in
	}
	if in.HardwarePrefetch != nil {
		in, out := &in.HardwarePrefetch, &out.HardwarePrefetch
		*out = new(string)
		**out = **in
	}
	if in.HwpmEnable != nil {
		in, out := &in.HwpmEnable, &out.HwpmEnable
		*out = new(string)
		**out = **in
	}
	if in.IPPrefetch != nil {
		in, out := &in.IPPrefetch, &out.IPPrefetch
		*out = new(string)
		**out = **in
	}
	if in.ImcInterleave != nil {
		in, out := &in.ImcInterleave, &out.ImcInterleave
		*out = new(string)
		**out = **in
	}
	if in.IntelDynamicSpeedSelect != nil {
		in, out := &in.IntelDynamicSpeedSelect, &out.IntelDynamicSpeedSelect
		*out = new(string)
		**out = **in
	}
	if in.IntelHyperThreadingTech != nil {
		in, out := &in.IntelHyperThreadingTech, &out.IntelHyperThreadingTech
		*out = new(string)
		**out = **in
	}
	if in.IntelSpeedSelect != nil {
		in, out := &in.IntelSpeedSelect, &out.IntelSpeedSelect
		*out = new(string)
		**out = **in
	}
	if in.IntelTurboBoostTech != nil {
		in, out := &in.IntelTurboBoostTech, &out.IntelTurboBoostTech
		*out = new(string)
		**out = **in
	}
	if in.IntelVirtualizationTechnology != nil {
		in, out := &in.IntelVirtualizationTechnology, &out.IntelVirtualizationTechnology
		*out = new(string)
		**out = **in
	}
	if in.IntelVtForDirectedIo != nil {
		in, out := &in.IntelVtForDirectedIo, &out.IntelVtForDirectedIo
		*out = new(string)
		**out = **in
	}
	if in.IntelVtdCoherencySupport != nil {
		in, out := &in.IntelVtdCoherencySupport, &out.IntelVtdCoherencySupport
		*out = new(string)
		**out = **in
	}
	if in.IntelVtdInterruptRemapping != nil {
		in, out := &in.IntelVtdInterruptRemapping, &out.IntelVtdInterruptRemapping
		*out = new(string)
		**out = **in
	}
	if in.IntelVtdPassThroughDmaSupport != nil {
		in, out := &in.IntelVtdPassThroughDmaSupport, &out.IntelVtdPassThroughDmaSupport
		*out = new(string)
		**out = **in
	}
	if in.IntelVtdatsSupport != nil {
		in, out := &in.IntelVtdatsSupport, &out.IntelVtdatsSupport
		*out = new(string)
		**out = **in
	}
	if in.IohErrorEnable != nil {
		in, out := &in.IohErrorEnable, &out.IohErrorEnable
		*out = new(string)
		**out = **in
	}
	if in.IohResource != nil {
		in, out := &in.IohResource, &out.IohResource
		*out = new(string)
		**out = **in
	}
	if in.Ipv4Http != nil {
		in, out := &in.Ipv4Http, &out.Ipv4Http
		*out = new(string)
		**out = **in
	}
	if in.Ipv4Pxe != nil {
		in, out := &in.Ipv4Pxe, &out.Ipv4Pxe
		*out = new(string)
		**out = **in
	}
	if in.Ipv6Http != nil {
		in, out := &in.Ipv6Http, &out.Ipv6Http
		*out = new(string)
		**out = **in
	}
	if in.Ipv6Pxe != nil {
		in, out := &in.Ipv6Pxe, &out.Ipv6Pxe
		*out = new(string)
		**out = **in
	}
	if in.KtiPrefetch != nil {
		in, out := &in.KtiPrefetch, &out.KtiPrefetch
		*out = new(string)
		**out = **in
	}
	if in.LegacyOsRedirection != nil {
		in, out := &in.LegacyOsRedirection, &out.LegacyOsRedirection
		*out = new(string)
		**out = **in
	}
	if in.LegacyUsbSupport != nil {
		in, out := &in.LegacyUsbSupport, &out.LegacyUsbSupport
		*out = new(string)
		**out = **in
	}
	if in.LlcAlloc != nil {
		in, out := &in.LlcAlloc, &out.LlcAlloc
		*out = new(string)
		**out = **in
	}
	if in.LlcPrefetch != nil {
		in, out := &in.LlcPrefetch, &out.LlcPrefetch
		*out = new(string)
		**out = **in
	}
	if in.LomPort0State != nil {
		in, out := &in.LomPort0State, &out.LomPort0State
		*out = new(string)
		**out = **in
	}
	if in.LomPort1State != nil {
		in, out := &in.LomPort1State, &out.LomPort1State
		*out = new(string)
		**out = **in
	}
	if in.LomPort2State != nil {
		in, out := &in.LomPort2State, &out.LomPort2State
		*out = new(string)
		**out = **in
	}
	if in.LomPort3State != nil {
		in, out := &in.LomPort3State, &out.LomPort3State
		*out = new(string)
		**out = **in
	}
	if in.LomPortsAllState != nil {
		in, out := &in.LomPortsAllState, &out.LomPortsAllState
		*out = new(string)
		**out = **in
	}
	if in.LvDdrMode != nil {
		in, out := &in.LvDdrMode, &out.LvDdrMode
		*out = new(string)
		**out = **in
	}
	if in.MakeDeviceNonBootable != nil {
		in, out := &in.MakeDeviceNonBootable, &out.MakeDeviceNonBootable
		*out = new(string)
		**out = **in
	}
	if in.MemoryBandwidthBoost != nil {
		in, out := &in.MemoryBandwidthBoost, &out.MemoryBandwidthBoost
		*out = new(string)
		**out = **in
	}
	if in.MemoryInterLeave != nil {
		in, out := &in.MemoryInterLeave, &out.MemoryInterLeave
		*out = new(string)
		**out = **in
	}
	if in.MemoryMappedIoAbove4Gb != nil {
		in, out := &in.MemoryMappedIoAbove4Gb, &out.MemoryMappedIoAbove4Gb
		*out = new(string)
		**out = **in
	}
	if in.MemoryRefreshRate != nil {
		in, out := &in.MemoryRefreshRate, &out.MemoryRefreshRate
		*out = new(string)
		**out = **in
	}
	if in.MemorySizeLimit != nil {
		in, out := &in.MemorySizeLimit, &out.MemorySizeLimit
		*out = new(string)
		**out = **in
	}
	if in.MemoryThermalThrottling != nil {
		in, out := &in.MemoryThermalThrottling, &out.MemoryThermalThrottling
		*out = new(string)
		**out = **in
	}
	if in.MirroringMode != nil {
		in, out := &in.MirroringMode, &out.MirroringMode
		*out = new(string)
		**out = **in
	}
	if in.MmcfgBase != nil {
		in, out := &in.MmcfgBase, &out.MmcfgBase
		*out = new(string)
		**out = **in
	}
	if in.ModTime != nil {
		in, out := &in.ModTime, &out.ModTime
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.NetworkStack != nil {
		in, out := &in.NetworkStack, &out.NetworkStack
		*out = new(string)
		**out = **in
	}
	if in.NumaOptimized != nil {
		in, out := &in.NumaOptimized, &out.NumaOptimized
		*out = new(string)
		**out = **in
	}
	if in.NvmdimmPerformConfig != nil {
		in, out := &in.NvmdimmPerformConfig, &out.NvmdimmPerformConfig
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Onboard10GbitLom != nil {
		in, out := &in.Onboard10GbitLom, &out.Onboard10GbitLom
		*out = new(string)
		**out = **in
	}
	if in.OnboardGbitLom != nil {
		in, out := &in.OnboardGbitLom, &out.OnboardGbitLom
		*out = new(string)
		**out = **in
	}
	if in.OnboardScuStorageSupport != nil {
		in, out := &in.OnboardScuStorageSupport, &out.OnboardScuStorageSupport
		*out = new(string)
		**out = **in
	}
	if in.OnboardScuStorageSwStack != nil {
		in, out := &in.OnboardScuStorageSwStack, &out.OnboardScuStorageSwStack
		*out = new(string)
		**out = **in
	}
	if in.OperationMode != nil {
		in, out := &in.OperationMode, &out.OperationMode
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = make([]OrganizationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OsBootWatchdogTimer != nil {
		in, out := &in.OsBootWatchdogTimer, &out.OsBootWatchdogTimer
		*out = new(string)
		**out = **in
	}
	if in.OsBootWatchdogTimerPolicy != nil {
		in, out := &in.OsBootWatchdogTimerPolicy, &out.OsBootWatchdogTimerPolicy
		*out = new(string)
		**out = **in
	}
	if in.OsBootWatchdogTimerTimeout != nil {
		in, out := &in.OsBootWatchdogTimerTimeout, &out.OsBootWatchdogTimerTimeout
		*out = new(string)
		**out = **in
	}
	if in.OutOfBandMgmtPort != nil {
		in, out := &in.OutOfBandMgmtPort, &out.OutOfBandMgmtPort
		*out = new(string)
		**out = **in
	}
	if in.Owners != nil {
		in, out := &in.Owners, &out.Owners
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PackageCstateLimit != nil {
		in, out := &in.PackageCstateLimit, &out.PackageCstateLimit
		*out = new(string)
		**out = **in
	}
	if in.PanicHighWatermark != nil {
		in, out := &in.PanicHighWatermark, &out.PanicHighWatermark
		*out = new(string)
		**out = **in
	}
	if in.Parent != nil {
		in, out := &in.Parent, &out.Parent
		*out = make([]ParentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PartialCacheLineSparing != nil {
		in, out := &in.PartialCacheLineSparing, &out.PartialCacheLineSparing
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorModeConfig != nil {
		in, out := &in.PartialMirrorModeConfig, &out.PartialMirrorModeConfig
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorPercent != nil {
		in, out := &in.PartialMirrorPercent, &out.PartialMirrorPercent
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorValue1 != nil {
		in, out := &in.PartialMirrorValue1, &out.PartialMirrorValue1
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorValue2 != nil {
		in, out := &in.PartialMirrorValue2, &out.PartialMirrorValue2
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorValue3 != nil {
		in, out := &in.PartialMirrorValue3, &out.PartialMirrorValue3
		*out = new(string)
		**out = **in
	}
	if in.PartialMirrorValue4 != nil {
		in, out := &in.PartialMirrorValue4, &out.PartialMirrorValue4
		*out = new(string)
		**out = **in
	}
	if in.PatrolScrub != nil {
		in, out := &in.PatrolScrub, &out.PatrolScrub
		*out = new(string)
		**out = **in
	}
	if in.PatrolScrubDuration != nil {
		in, out := &in.PatrolScrubDuration, &out.PatrolScrubDuration
		*out = new(string)
		**out = **in
	}
	if in.PcIeRasSupport != nil {
		in, out := &in.PcIeRasSupport, &out.PcIeRasSupport
		*out = new(string)
		**out = **in
	}
	if in.PcIeSsdHotPlugSupport != nil {
		in, out := &in.PcIeSsdHotPlugSupport, &out.PcIeSsdHotPlugSupport
		*out = new(string)
		**out = **in
	}
	if in.PchUsb30Mode != nil {
		in, out := &in.PchUsb30Mode, &out.PchUsb30Mode
		*out = new(string)
		**out = **in
	}
	if in.PciOptionRoMs != nil {
		in, out := &in.PciOptionRoMs, &out.PciOptionRoMs
		*out = new(string)
		**out = **in
	}
	if in.PciRomClp != nil {
		in, out := &in.PciRomClp, &out.PciRomClp
		*out = new(string)
		**out = **in
	}
	if in.PcieAriSupport != nil {
		in, out := &in.PcieAriSupport, &out.PcieAriSupport
		*out = new(string)
		**out = **in
	}
	if in.PciePllSsc != nil {
		in, out := &in.PciePllSsc, &out.PciePllSsc
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMraid1LinkSpeed != nil {
		in, out := &in.PcieSlotMraid1LinkSpeed, &out.PcieSlotMraid1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMraid1OptionRom != nil {
		in, out := &in.PcieSlotMraid1OptionRom, &out.PcieSlotMraid1OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMraid2LinkSpeed != nil {
		in, out := &in.PcieSlotMraid2LinkSpeed, &out.PcieSlotMraid2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMraid2OptionRom != nil {
		in, out := &in.PcieSlotMraid2OptionRom, &out.PcieSlotMraid2OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMstorraidLinkSpeed != nil {
		in, out := &in.PcieSlotMstorraidLinkSpeed, &out.PcieSlotMstorraidLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotMstorraidOptionRom != nil {
		in, out := &in.PcieSlotMstorraidOptionRom, &out.PcieSlotMstorraidOptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme1LinkSpeed != nil {
		in, out := &in.PcieSlotNvme1LinkSpeed, &out.PcieSlotNvme1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme1OptionRom != nil {
		in, out := &in.PcieSlotNvme1OptionRom, &out.PcieSlotNvme1OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme2LinkSpeed != nil {
		in, out := &in.PcieSlotNvme2LinkSpeed, &out.PcieSlotNvme2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme2OptionRom != nil {
		in, out := &in.PcieSlotNvme2OptionRom, &out.PcieSlotNvme2OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme3LinkSpeed != nil {
		in, out := &in.PcieSlotNvme3LinkSpeed, &out.PcieSlotNvme3LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme3OptionRom != nil {
		in, out := &in.PcieSlotNvme3OptionRom, &out.PcieSlotNvme3OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme4LinkSpeed != nil {
		in, out := &in.PcieSlotNvme4LinkSpeed, &out.PcieSlotNvme4LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme4OptionRom != nil {
		in, out := &in.PcieSlotNvme4OptionRom, &out.PcieSlotNvme4OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme5LinkSpeed != nil {
		in, out := &in.PcieSlotNvme5LinkSpeed, &out.PcieSlotNvme5LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme5OptionRom != nil {
		in, out := &in.PcieSlotNvme5OptionRom, &out.PcieSlotNvme5OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme6LinkSpeed != nil {
		in, out := &in.PcieSlotNvme6LinkSpeed, &out.PcieSlotNvme6LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotNvme6OptionRom != nil {
		in, out := &in.PcieSlotNvme6OptionRom, &out.PcieSlotNvme6OptionRom
		*out = new(string)
		**out = **in
	}
	if in.PcieSlotsCdnEnable != nil {
		in, out := &in.PcieSlotsCdnEnable, &out.PcieSlotsCdnEnable
		*out = new(string)
		**out = **in
	}
	if in.PermissionResources != nil {
		in, out := &in.PermissionResources, &out.PermissionResources
		*out = make([]PermissionResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PopSupport != nil {
		in, out := &in.PopSupport, &out.PopSupport
		*out = new(string)
		**out = **in
	}
	if in.PostErrorPause != nil {
		in, out := &in.PostErrorPause, &out.PostErrorPause
		*out = new(string)
		**out = **in
	}
	if in.PostPackageRepair != nil {
		in, out := &in.PostPackageRepair, &out.PostPackageRepair
		*out = new(string)
		**out = **in
	}
	if in.ProcessorC1E != nil {
		in, out := &in.ProcessorC1E, &out.ProcessorC1E
		*out = new(string)
		**out = **in
	}
	if in.ProcessorC3Report != nil {
		in, out := &in.ProcessorC3Report, &out.ProcessorC3Report
		*out = new(string)
		**out = **in
	}
	if in.ProcessorC6Report != nil {
		in, out := &in.ProcessorC6Report, &out.ProcessorC6Report
		*out = new(string)
		**out = **in
	}
	if in.ProcessorCstate != nil {
		in, out := &in.ProcessorCstate, &out.ProcessorCstate
		*out = new(string)
		**out = **in
	}
	if in.Profiles != nil {
		in, out := &in.Profiles, &out.Profiles
		*out = make([]ProfilesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Psata != nil {
		in, out := &in.Psata, &out.Psata
		*out = new(string)
		**out = **in
	}
	if in.PstateCoordType != nil {
		in, out := &in.PstateCoordType, &out.PstateCoordType
		*out = new(string)
		**out = **in
	}
	if in.PuttyKeyPad != nil {
		in, out := &in.PuttyKeyPad, &out.PuttyKeyPad
		*out = new(string)
		**out = **in
	}
	if in.PwrPerfTuning != nil {
		in, out := &in.PwrPerfTuning, &out.PwrPerfTuning
		*out = new(string)
		**out = **in
	}
	if in.QpiLinkFrequency != nil {
		in, out := &in.QpiLinkFrequency, &out.QpiLinkFrequency
		*out = new(string)
		**out = **in
	}
	if in.QpiLinkSpeed != nil {
		in, out := &in.QpiLinkSpeed, &out.QpiLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.QpiSnoopMode != nil {
		in, out := &in.QpiSnoopMode, &out.QpiSnoopMode
		*out = new(string)
		**out = **in
	}
	if in.RankInterLeave != nil {
		in, out := &in.RankInterLeave, &out.RankInterLeave
		*out = new(string)
		**out = **in
	}
	if in.RedirectionAfterPost != nil {
		in, out := &in.RedirectionAfterPost, &out.RedirectionAfterPost
		*out = new(string)
		**out = **in
	}
	if in.SataModeSelect != nil {
		in, out := &in.SataModeSelect, &out.SataModeSelect
		*out = new(string)
		**out = **in
	}
	if in.SelectMemoryRasConfiguration != nil {
		in, out := &in.SelectMemoryRasConfiguration, &out.SelectMemoryRasConfiguration
		*out = new(string)
		**out = **in
	}
	if in.SelectPprType != nil {
		in, out := &in.SelectPprType, &out.SelectPprType
		*out = new(string)
		**out = **in
	}
	if in.SerialPortAenable != nil {
		in, out := &in.SerialPortAenable, &out.SerialPortAenable
		*out = new(string)
		**out = **in
	}
	if in.Sev != nil {
		in, out := &in.Sev, &out.Sev
		*out = new(string)
		**out = **in
	}
	if in.SgxAutoRegistrationAgent != nil {
		in, out := &in.SgxAutoRegistrationAgent, &out.SgxAutoRegistrationAgent
		*out = new(string)
		**out = **in
	}
	if in.SgxEpoch0 != nil {
		in, out := &in.SgxEpoch0, &out.SgxEpoch0
		*out = new(string)
		**out = **in
	}
	if in.SgxEpoch1 != nil {
		in, out := &in.SgxEpoch1, &out.SgxEpoch1
		*out = new(string)
		**out = **in
	}
	if in.SgxFactoryReset != nil {
		in, out := &in.SgxFactoryReset, &out.SgxFactoryReset
		*out = new(string)
		**out = **in
	}
	if in.SgxLePubKeyHash0 != nil {
		in, out := &in.SgxLePubKeyHash0, &out.SgxLePubKeyHash0
		*out = new(string)
		**out = **in
	}
	if in.SgxLePubKeyHash1 != nil {
		in, out := &in.SgxLePubKeyHash1, &out.SgxLePubKeyHash1
		*out = new(string)
		**out = **in
	}
	if in.SgxLePubKeyHash2 != nil {
		in, out := &in.SgxLePubKeyHash2, &out.SgxLePubKeyHash2
		*out = new(string)
		**out = **in
	}
	if in.SgxLePubKeyHash3 != nil {
		in, out := &in.SgxLePubKeyHash3, &out.SgxLePubKeyHash3
		*out = new(string)
		**out = **in
	}
	if in.SgxLeWr != nil {
		in, out := &in.SgxLeWr, &out.SgxLeWr
		*out = new(string)
		**out = **in
	}
	if in.SgxPackageInfoInBandAccess != nil {
		in, out := &in.SgxPackageInfoInBandAccess, &out.SgxPackageInfoInBandAccess
		*out = new(string)
		**out = **in
	}
	if in.SgxQos != nil {
		in, out := &in.SgxQos, &out.SgxQos
		*out = new(string)
		**out = **in
	}
	if in.Sha1PcrBank != nil {
		in, out := &in.Sha1PcrBank, &out.Sha1PcrBank
		*out = new(string)
		**out = **in
	}
	if in.Sha256PcrBank != nil {
		in, out := &in.Sha256PcrBank, &out.Sha256PcrBank
		*out = new(string)
		**out = **in
	}
	if in.SharedScope != nil {
		in, out := &in.SharedScope, &out.SharedScope
		*out = new(string)
		**out = **in
	}
	if in.SinglePctlEnable != nil {
		in, out := &in.SinglePctlEnable, &out.SinglePctlEnable
		*out = new(string)
		**out = **in
	}
	if in.Slot10LinkSpeed != nil {
		in, out := &in.Slot10LinkSpeed, &out.Slot10LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot10State != nil {
		in, out := &in.Slot10State, &out.Slot10State
		*out = new(string)
		**out = **in
	}
	if in.Slot11LinkSpeed != nil {
		in, out := &in.Slot11LinkSpeed, &out.Slot11LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot11State != nil {
		in, out := &in.Slot11State, &out.Slot11State
		*out = new(string)
		**out = **in
	}
	if in.Slot12LinkSpeed != nil {
		in, out := &in.Slot12LinkSpeed, &out.Slot12LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot12State != nil {
		in, out := &in.Slot12State, &out.Slot12State
		*out = new(string)
		**out = **in
	}
	if in.Slot13State != nil {
		in, out := &in.Slot13State, &out.Slot13State
		*out = new(string)
		**out = **in
	}
	if in.Slot14State != nil {
		in, out := &in.Slot14State, &out.Slot14State
		*out = new(string)
		**out = **in
	}
	if in.Slot1LinkSpeed != nil {
		in, out := &in.Slot1LinkSpeed, &out.Slot1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot1State != nil {
		in, out := &in.Slot1State, &out.Slot1State
		*out = new(string)
		**out = **in
	}
	if in.Slot2LinkSpeed != nil {
		in, out := &in.Slot2LinkSpeed, &out.Slot2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot2State != nil {
		in, out := &in.Slot2State, &out.Slot2State
		*out = new(string)
		**out = **in
	}
	if in.Slot3LinkSpeed != nil {
		in, out := &in.Slot3LinkSpeed, &out.Slot3LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot3State != nil {
		in, out := &in.Slot3State, &out.Slot3State
		*out = new(string)
		**out = **in
	}
	if in.Slot4LinkSpeed != nil {
		in, out := &in.Slot4LinkSpeed, &out.Slot4LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot4State != nil {
		in, out := &in.Slot4State, &out.Slot4State
		*out = new(string)
		**out = **in
	}
	if in.Slot5LinkSpeed != nil {
		in, out := &in.Slot5LinkSpeed, &out.Slot5LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot5State != nil {
		in, out := &in.Slot5State, &out.Slot5State
		*out = new(string)
		**out = **in
	}
	if in.Slot6LinkSpeed != nil {
		in, out := &in.Slot6LinkSpeed, &out.Slot6LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot6State != nil {
		in, out := &in.Slot6State, &out.Slot6State
		*out = new(string)
		**out = **in
	}
	if in.Slot7LinkSpeed != nil {
		in, out := &in.Slot7LinkSpeed, &out.Slot7LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot7State != nil {
		in, out := &in.Slot7State, &out.Slot7State
		*out = new(string)
		**out = **in
	}
	if in.Slot8LinkSpeed != nil {
		in, out := &in.Slot8LinkSpeed, &out.Slot8LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot8State != nil {
		in, out := &in.Slot8State, &out.Slot8State
		*out = new(string)
		**out = **in
	}
	if in.Slot9LinkSpeed != nil {
		in, out := &in.Slot9LinkSpeed, &out.Slot9LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Slot9State != nil {
		in, out := &in.Slot9State, &out.Slot9State
		*out = new(string)
		**out = **in
	}
	if in.SlotFlomLinkSpeed != nil {
		in, out := &in.SlotFlomLinkSpeed, &out.SlotFlomLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme10LinkSpeed != nil {
		in, out := &in.SlotFrontNvme10LinkSpeed, &out.SlotFrontNvme10LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme10OptionRom != nil {
		in, out := &in.SlotFrontNvme10OptionRom, &out.SlotFrontNvme10OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme11LinkSpeed != nil {
		in, out := &in.SlotFrontNvme11LinkSpeed, &out.SlotFrontNvme11LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme11OptionRom != nil {
		in, out := &in.SlotFrontNvme11OptionRom, &out.SlotFrontNvme11OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme12LinkSpeed != nil {
		in, out := &in.SlotFrontNvme12LinkSpeed, &out.SlotFrontNvme12LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme12OptionRom != nil {
		in, out := &in.SlotFrontNvme12OptionRom, &out.SlotFrontNvme12OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme13OptionRom != nil {
		in, out := &in.SlotFrontNvme13OptionRom, &out.SlotFrontNvme13OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme14OptionRom != nil {
		in, out := &in.SlotFrontNvme14OptionRom, &out.SlotFrontNvme14OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme15OptionRom != nil {
		in, out := &in.SlotFrontNvme15OptionRom, &out.SlotFrontNvme15OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme16OptionRom != nil {
		in, out := &in.SlotFrontNvme16OptionRom, &out.SlotFrontNvme16OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme17OptionRom != nil {
		in, out := &in.SlotFrontNvme17OptionRom, &out.SlotFrontNvme17OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme18OptionRom != nil {
		in, out := &in.SlotFrontNvme18OptionRom, &out.SlotFrontNvme18OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme19OptionRom != nil {
		in, out := &in.SlotFrontNvme19OptionRom, &out.SlotFrontNvme19OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme1LinkSpeed != nil {
		in, out := &in.SlotFrontNvme1LinkSpeed, &out.SlotFrontNvme1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme1OptionRom != nil {
		in, out := &in.SlotFrontNvme1OptionRom, &out.SlotFrontNvme1OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme20OptionRom != nil {
		in, out := &in.SlotFrontNvme20OptionRom, &out.SlotFrontNvme20OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme21OptionRom != nil {
		in, out := &in.SlotFrontNvme21OptionRom, &out.SlotFrontNvme21OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme22OptionRom != nil {
		in, out := &in.SlotFrontNvme22OptionRom, &out.SlotFrontNvme22OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme23OptionRom != nil {
		in, out := &in.SlotFrontNvme23OptionRom, &out.SlotFrontNvme23OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme24OptionRom != nil {
		in, out := &in.SlotFrontNvme24OptionRom, &out.SlotFrontNvme24OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme2LinkSpeed != nil {
		in, out := &in.SlotFrontNvme2LinkSpeed, &out.SlotFrontNvme2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme2OptionRom != nil {
		in, out := &in.SlotFrontNvme2OptionRom, &out.SlotFrontNvme2OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme3LinkSpeed != nil {
		in, out := &in.SlotFrontNvme3LinkSpeed, &out.SlotFrontNvme3LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme3OptionRom != nil {
		in, out := &in.SlotFrontNvme3OptionRom, &out.SlotFrontNvme3OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme4LinkSpeed != nil {
		in, out := &in.SlotFrontNvme4LinkSpeed, &out.SlotFrontNvme4LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme4OptionRom != nil {
		in, out := &in.SlotFrontNvme4OptionRom, &out.SlotFrontNvme4OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme5LinkSpeed != nil {
		in, out := &in.SlotFrontNvme5LinkSpeed, &out.SlotFrontNvme5LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme5OptionRom != nil {
		in, out := &in.SlotFrontNvme5OptionRom, &out.SlotFrontNvme5OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme6LinkSpeed != nil {
		in, out := &in.SlotFrontNvme6LinkSpeed, &out.SlotFrontNvme6LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme6OptionRom != nil {
		in, out := &in.SlotFrontNvme6OptionRom, &out.SlotFrontNvme6OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme7LinkSpeed != nil {
		in, out := &in.SlotFrontNvme7LinkSpeed, &out.SlotFrontNvme7LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme7OptionRom != nil {
		in, out := &in.SlotFrontNvme7OptionRom, &out.SlotFrontNvme7OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme8LinkSpeed != nil {
		in, out := &in.SlotFrontNvme8LinkSpeed, &out.SlotFrontNvme8LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme8OptionRom != nil {
		in, out := &in.SlotFrontNvme8OptionRom, &out.SlotFrontNvme8OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme9LinkSpeed != nil {
		in, out := &in.SlotFrontNvme9LinkSpeed, &out.SlotFrontNvme9LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontNvme9OptionRom != nil {
		in, out := &in.SlotFrontNvme9OptionRom, &out.SlotFrontNvme9OptionRom
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontSlot5LinkSpeed != nil {
		in, out := &in.SlotFrontSlot5LinkSpeed, &out.SlotFrontSlot5LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotFrontSlot6LinkSpeed != nil {
		in, out := &in.SlotFrontSlot6LinkSpeed, &out.SlotFrontSlot6LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu1State != nil {
		in, out := &in.SlotGpu1State, &out.SlotGpu1State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu2State != nil {
		in, out := &in.SlotGpu2State, &out.SlotGpu2State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu3State != nil {
		in, out := &in.SlotGpu3State, &out.SlotGpu3State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu4State != nil {
		in, out := &in.SlotGpu4State, &out.SlotGpu4State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu5State != nil {
		in, out := &in.SlotGpu5State, &out.SlotGpu5State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu6State != nil {
		in, out := &in.SlotGpu6State, &out.SlotGpu6State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu7State != nil {
		in, out := &in.SlotGpu7State, &out.SlotGpu7State
		*out = new(string)
		**out = **in
	}
	if in.SlotGpu8State != nil {
		in, out := &in.SlotGpu8State, &out.SlotGpu8State
		*out = new(string)
		**out = **in
	}
	if in.SlotHbaLinkSpeed != nil {
		in, out := &in.SlotHbaLinkSpeed, &out.SlotHbaLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotHbaState != nil {
		in, out := &in.SlotHbaState, &out.SlotHbaState
		*out = new(string)
		**out = **in
	}
	if in.SlotLom1Link != nil {
		in, out := &in.SlotLom1Link, &out.SlotLom1Link
		*out = new(string)
		**out = **in
	}
	if in.SlotLom2Link != nil {
		in, out := &in.SlotLom2Link, &out.SlotLom2Link
		*out = new(string)
		**out = **in
	}
	if in.SlotMezzState != nil {
		in, out := &in.SlotMezzState, &out.SlotMezzState
		*out = new(string)
		**out = **in
	}
	if in.SlotMlomLinkSpeed != nil {
		in, out := &in.SlotMlomLinkSpeed, &out.SlotMlomLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotMlomState != nil {
		in, out := &in.SlotMlomState, &out.SlotMlomState
		*out = new(string)
		**out = **in
	}
	if in.SlotMraidLinkSpeed != nil {
		in, out := &in.SlotMraidLinkSpeed, &out.SlotMraidLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotMraidState != nil {
		in, out := &in.SlotMraidState, &out.SlotMraidState
		*out = new(string)
		**out = **in
	}
	if in.SlotN10State != nil {
		in, out := &in.SlotN10State, &out.SlotN10State
		*out = new(string)
		**out = **in
	}
	if in.SlotN11State != nil {
		in, out := &in.SlotN11State, &out.SlotN11State
		*out = new(string)
		**out = **in
	}
	if in.SlotN12State != nil {
		in, out := &in.SlotN12State, &out.SlotN12State
		*out = new(string)
		**out = **in
	}
	if in.SlotN13State != nil {
		in, out := &in.SlotN13State, &out.SlotN13State
		*out = new(string)
		**out = **in
	}
	if in.SlotN14State != nil {
		in, out := &in.SlotN14State, &out.SlotN14State
		*out = new(string)
		**out = **in
	}
	if in.SlotN15State != nil {
		in, out := &in.SlotN15State, &out.SlotN15State
		*out = new(string)
		**out = **in
	}
	if in.SlotN16State != nil {
		in, out := &in.SlotN16State, &out.SlotN16State
		*out = new(string)
		**out = **in
	}
	if in.SlotN17State != nil {
		in, out := &in.SlotN17State, &out.SlotN17State
		*out = new(string)
		**out = **in
	}
	if in.SlotN18State != nil {
		in, out := &in.SlotN18State, &out.SlotN18State
		*out = new(string)
		**out = **in
	}
	if in.SlotN19State != nil {
		in, out := &in.SlotN19State, &out.SlotN19State
		*out = new(string)
		**out = **in
	}
	if in.SlotN1State != nil {
		in, out := &in.SlotN1State, &out.SlotN1State
		*out = new(string)
		**out = **in
	}
	if in.SlotN20State != nil {
		in, out := &in.SlotN20State, &out.SlotN20State
		*out = new(string)
		**out = **in
	}
	if in.SlotN21State != nil {
		in, out := &in.SlotN21State, &out.SlotN21State
		*out = new(string)
		**out = **in
	}
	if in.SlotN22State != nil {
		in, out := &in.SlotN22State, &out.SlotN22State
		*out = new(string)
		**out = **in
	}
	if in.SlotN23State != nil {
		in, out := &in.SlotN23State, &out.SlotN23State
		*out = new(string)
		**out = **in
	}
	if in.SlotN24State != nil {
		in, out := &in.SlotN24State, &out.SlotN24State
		*out = new(string)
		**out = **in
	}
	if in.SlotN2State != nil {
		in, out := &in.SlotN2State, &out.SlotN2State
		*out = new(string)
		**out = **in
	}
	if in.SlotN3State != nil {
		in, out := &in.SlotN3State, &out.SlotN3State
		*out = new(string)
		**out = **in
	}
	if in.SlotN4State != nil {
		in, out := &in.SlotN4State, &out.SlotN4State
		*out = new(string)
		**out = **in
	}
	if in.SlotN5State != nil {
		in, out := &in.SlotN5State, &out.SlotN5State
		*out = new(string)
		**out = **in
	}
	if in.SlotN6State != nil {
		in, out := &in.SlotN6State, &out.SlotN6State
		*out = new(string)
		**out = **in
	}
	if in.SlotN7State != nil {
		in, out := &in.SlotN7State, &out.SlotN7State
		*out = new(string)
		**out = **in
	}
	if in.SlotN8State != nil {
		in, out := &in.SlotN8State, &out.SlotN8State
		*out = new(string)
		**out = **in
	}
	if in.SlotN9State != nil {
		in, out := &in.SlotN9State, &out.SlotN9State
		*out = new(string)
		**out = **in
	}
	if in.SlotRaidLinkSpeed != nil {
		in, out := &in.SlotRaidLinkSpeed, &out.SlotRaidLinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRaidState != nil {
		in, out := &in.SlotRaidState, &out.SlotRaidState
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme1LinkSpeed != nil {
		in, out := &in.SlotRearNvme1LinkSpeed, &out.SlotRearNvme1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme1State != nil {
		in, out := &in.SlotRearNvme1State, &out.SlotRearNvme1State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme2LinkSpeed != nil {
		in, out := &in.SlotRearNvme2LinkSpeed, &out.SlotRearNvme2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme2State != nil {
		in, out := &in.SlotRearNvme2State, &out.SlotRearNvme2State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme3LinkSpeed != nil {
		in, out := &in.SlotRearNvme3LinkSpeed, &out.SlotRearNvme3LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme3State != nil {
		in, out := &in.SlotRearNvme3State, &out.SlotRearNvme3State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme4LinkSpeed != nil {
		in, out := &in.SlotRearNvme4LinkSpeed, &out.SlotRearNvme4LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme4State != nil {
		in, out := &in.SlotRearNvme4State, &out.SlotRearNvme4State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme5State != nil {
		in, out := &in.SlotRearNvme5State, &out.SlotRearNvme5State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme6State != nil {
		in, out := &in.SlotRearNvme6State, &out.SlotRearNvme6State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme7State != nil {
		in, out := &in.SlotRearNvme7State, &out.SlotRearNvme7State
		*out = new(string)
		**out = **in
	}
	if in.SlotRearNvme8State != nil {
		in, out := &in.SlotRearNvme8State, &out.SlotRearNvme8State
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser1LinkSpeed != nil {
		in, out := &in.SlotRiser1LinkSpeed, &out.SlotRiser1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser1Slot1LinkSpeed != nil {
		in, out := &in.SlotRiser1Slot1LinkSpeed, &out.SlotRiser1Slot1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser1Slot2LinkSpeed != nil {
		in, out := &in.SlotRiser1Slot2LinkSpeed, &out.SlotRiser1Slot2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser1Slot3LinkSpeed != nil {
		in, out := &in.SlotRiser1Slot3LinkSpeed, &out.SlotRiser1Slot3LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser2LinkSpeed != nil {
		in, out := &in.SlotRiser2LinkSpeed, &out.SlotRiser2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser2Slot4LinkSpeed != nil {
		in, out := &in.SlotRiser2Slot4LinkSpeed, &out.SlotRiser2Slot4LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser2Slot5LinkSpeed != nil {
		in, out := &in.SlotRiser2Slot5LinkSpeed, &out.SlotRiser2Slot5LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotRiser2Slot6LinkSpeed != nil {
		in, out := &in.SlotRiser2Slot6LinkSpeed, &out.SlotRiser2Slot6LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotSasState != nil {
		in, out := &in.SlotSasState, &out.SlotSasState
		*out = new(string)
		**out = **in
	}
	if in.SlotSsdSlot1LinkSpeed != nil {
		in, out := &in.SlotSsdSlot1LinkSpeed, &out.SlotSsdSlot1LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.SlotSsdSlot2LinkSpeed != nil {
		in, out := &in.SlotSsdSlot2LinkSpeed, &out.SlotSsdSlot2LinkSpeed
		*out = new(string)
		**out = **in
	}
	if in.Smee != nil {
		in, out := &in.Smee, &out.Smee
		*out = new(string)
		**out = **in
	}
	if in.SmtMode != nil {
		in, out := &in.SmtMode, &out.SmtMode
		*out = new(string)
		**out = **in
	}
	if in.Snc != nil {
		in, out := &in.Snc, &out.Snc
		*out = new(string)
		**out = **in
	}
	if in.SnoopyModeFor2Lm != nil {
		in, out := &in.SnoopyModeFor2Lm, &out.SnoopyModeFor2Lm
		*out = new(string)
		**out = **in
	}
	if in.SnoopyModeForAd != nil {
		in, out := &in.SnoopyModeForAd, &out.SnoopyModeForAd
		*out = new(string)
		**out = **in
	}
	if in.SparingMode != nil {
		in, out := &in.SparingMode, &out.SparingMode
		*out = new(string)
		**out = **in
	}
	if in.SrIov != nil {
		in, out := &in.SrIov, &out.SrIov
		*out = new(string)
		**out = **in
	}
	if in.StreamerPrefetch != nil {
		in, out := &in.StreamerPrefetch, &out.StreamerPrefetch
		*out = new(string)
		**out = **in
	}
	if in.SvmMode != nil {
		in, out := &in.SvmMode, &out.SvmMode
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]TagsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminalType != nil {
		in, out := &in.TerminalType, &out.TerminalType
		*out = new(string)
		**out = **in
	}
	if in.TpmControl != nil {
		in, out := &in.TpmControl, &out.TpmControl
		*out = new(string)
		**out = **in
	}
	if in.TpmPendingOperation != nil {
		in, out := &in.TpmPendingOperation, &out.TpmPendingOperation
		*out = new(string)
		**out = **in
	}
	if in.TpmSupport != nil {
		in, out := &in.TpmSupport, &out.TpmSupport
		*out = new(string)
		**out = **in
	}
	if in.Tsme != nil {
		in, out := &in.Tsme, &out.Tsme
		*out = new(string)
		**out = **in
	}
	if in.TxtSupport != nil {
		in, out := &in.TxtSupport, &out.TxtSupport
		*out = new(string)
		**out = **in
	}
	if in.UcsmBootOrderRule != nil {
		in, out := &in.UcsmBootOrderRule, &out.UcsmBootOrderRule
		*out = new(string)
		**out = **in
	}
	if in.UfsDisable != nil {
		in, out := &in.UfsDisable, &out.UfsDisable
		*out = new(string)
		**out = **in
	}
	if in.UmaBasedClustering != nil {
		in, out := &in.UmaBasedClustering, &out.UmaBasedClustering
		*out = new(string)
		**out = **in
	}
	if in.UpiLinkEnablement != nil {
		in, out := &in.UpiLinkEnablement, &out.UpiLinkEnablement
		*out = new(string)
		**out = **in
	}
	if in.UpiPowerManagement != nil {
		in, out := &in.UpiPowerManagement, &out.UpiPowerManagement
		*out = new(string)
		**out = **in
	}
	if in.UsbEmul6064 != nil {
		in, out := &in.UsbEmul6064, &out.UsbEmul6064
		*out = new(string)
		**out = **in
	}
	if in.UsbPortFront != nil {
		in, out := &in.UsbPortFront, &out.UsbPortFront
		*out = new(string)
		**out = **in
	}
	if in.UsbPortInternal != nil {
		in, out := &in.UsbPortInternal, &out.UsbPortInternal
		*out = new(string)
		**out = **in
	}
	if in.UsbPortKvm != nil {
		in, out := &in.UsbPortKvm, &out.UsbPortKvm
		*out = new(string)
		**out = **in
	}
	if in.UsbPortRear != nil {
		in, out := &in.UsbPortRear, &out.UsbPortRear
		*out = new(string)
		**out = **in
	}
	if in.UsbPortSdCard != nil {
		in, out := &in.UsbPortSdCard, &out.UsbPortSdCard
		*out = new(string)
		**out = **in
	}
	if in.UsbPortVmedia != nil {
		in, out := &in.UsbPortVmedia, &out.UsbPortVmedia
		*out = new(string)
		**out = **in
	}
	if in.UsbXhciSupport != nil {
		in, out := &in.UsbXhciSupport, &out.UsbXhciSupport
		*out = new(string)
		**out = **in
	}
	if in.VersionContext != nil {
		in, out := &in.VersionContext, &out.VersionContext
		*out = make([]VersionContextParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VgaPriority != nil {
		in, out := &in.VgaPriority, &out.VgaPriority
		*out = new(string)
		**out = **in
	}
	if in.VirtualNuma != nil {
		in, out := &in.VirtualNuma, &out.VirtualNuma
		*out = new(string)
		**out = **in
	}
	if in.VmdEnable != nil {
		in, out := &in.VmdEnable, &out.VmdEnable
		*out = new(string)
		**out = **in
	}
	if in.VolMemoryMode != nil {
		in, out := &in.VolMemoryMode, &out.VolMemoryMode
		*out = new(string)
		**out = **in
	}
	if in.WorkLoadConfig != nil {
		in, out := &in.WorkLoadConfig, &out.WorkLoadConfig
		*out = new(string)
		**out = **in
	}
	if in.XptPrefetch != nil {
		in, out := &in.XptPrefetch, &out.XptPrefetch
		*out = new(string)
		**out = **in
	}
	if in.XptRemotePrefetch != nil {
		in, out := &in.XptRemotePrefetch, &out.XptRemotePrefetch
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyParameters.
func (in *PolicyParameters) DeepCopy() *PolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicySpec) DeepCopyInto(out *PolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicySpec.
func (in *PolicySpec) DeepCopy() *PolicySpec {
	if in == nil {
		return nil
	}
	out := new(PolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyStatus) DeepCopyInto(out *PolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	out.AtProvider = in.AtProvider
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyStatus.
func (in *PolicyStatus) DeepCopy() *PolicyStatus {
	if in == nil {
		return nil
	}
	out := new(PolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProfilesObservation) DeepCopyInto(out *ProfilesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProfilesObservation.
func (in *ProfilesObservation) DeepCopy() *ProfilesObservation {
	if in == nil {
		return nil
	}
	out := new(ProfilesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProfilesParameters) DeepCopyInto(out *ProfilesParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProfilesParameters.
func (in *ProfilesParameters) DeepCopy() *ProfilesParameters {
	if in == nil {
		return nil
	}
	out := new(ProfilesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RefMoObservation) DeepCopyInto(out *RefMoObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RefMoObservation.
func (in *RefMoObservation) DeepCopy() *RefMoObservation {
	if in == nil {
		return nil
	}
	out := new(RefMoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RefMoParameters) DeepCopyInto(out *RefMoParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RefMoParameters.
func (in *RefMoParameters) DeepCopy() *RefMoParameters {
	if in == nil {
		return nil
	}
	out := new(RefMoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagsObservation) DeepCopyInto(out *TagsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagsObservation.
func (in *TagsObservation) DeepCopy() *TagsObservation {
	if in == nil {
		return nil
	}
	out := new(TagsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagsParameters) DeepCopyInto(out *TagsParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagsParameters.
func (in *TagsParameters) DeepCopy() *TagsParameters {
	if in == nil {
		return nil
	}
	out := new(TagsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionContextObservation) DeepCopyInto(out *VersionContextObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionContextObservation.
func (in *VersionContextObservation) DeepCopy() *VersionContextObservation {
	if in == nil {
		return nil
	}
	out := new(VersionContextObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionContextParameters) DeepCopyInto(out *VersionContextParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = new(string)
		**out = **in
	}
	if in.ClassID != nil {
		in, out := &in.ClassID, &out.ClassID
		*out = new(string)
		**out = **in
	}
	if in.InterestedMos != nil {
		in, out := &in.InterestedMos, &out.InterestedMos
		*out = make([]InterestedMosParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NrVersion != nil {
		in, out := &in.NrVersion, &out.NrVersion
		*out = new(string)
		**out = **in
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		*out = new(string)
		**out = **in
	}
	if in.RefMo != nil {
		in, out := &in.RefMo, &out.RefMo
		*out = make([]RefMoParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		*out = new(string)
		**out = **in
	}
	if in.VersionType != nil {
		in, out := &in.VersionType, &out.VersionType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionContextParameters.
func (in *VersionContextParameters) DeepCopy() *VersionContextParameters {
	if in == nil {
		return nil
	}
	out := new(VersionContextParameters)
	in.DeepCopyInto(out)
	return out
}
